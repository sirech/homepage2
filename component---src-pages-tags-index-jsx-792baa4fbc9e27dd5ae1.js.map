{"version":3,"file":"component---src-pages-tags-index-jsx-792baa4fbc9e27dd5ae1.js","mappings":"uLAWA,MAXiBA,CAACC,EAAMC,KACtB,MAAMC,EAAa,IAAIF,GAAMG,MAAK,CAACC,EAAGC,IAC7BA,EAAEC,MAAQF,EAAEE,QAGrB,MAAO,CACLC,IAAKL,EAAWM,MAAM,EAAGP,GACzBQ,MAAOP,EAAWM,MAAMP,GACzB,E,sCCPQS,EAAU,+BCYrB,MAAMC,EAAMA,EAAGC,MAAKN,WAClBO,EAAAA,cAACC,EAAAA,EAAQ,CACPC,KAAMH,EACNI,KACEH,EAAAA,cAAAA,EAAAA,SAAA,KACGD,EAAI,MAAGC,EAAAA,cAAA,UAAKP,MAMrBK,EAAIM,UAAY,CACdL,IAAKM,IAAAA,OAAiBC,WACtBb,MAAOY,IAAAA,OAAiBC,YAG1B,MAAMC,EAAOA,EACXC,MACErB,MAAQsB,cAGV,MAAM,IAAEf,EAAG,MAAEE,GAAUc,EAAUD,EAAO,IACxC,OACET,EAAAA,cAAA,YACEA,EAAAA,cAACW,EAAAA,EAAS,KACRX,EAAAA,cAAA,WAASY,UAAWC,IAAG,OAAQhB,IAC7BG,EAAAA,cAAA,UAAI,YACHN,EAAIoB,KAAI,EAAGf,MAAKN,WACfO,EAAAA,cAACF,EAAG,CAACiB,IAAKhB,EAAKA,IAAKA,EAAKN,MAAOA,OAIpCO,EAAAA,cAAA,WAASY,UAAWC,IAAG,OAAQhB,IAC7BG,EAAAA,cAAA,UAAI,cACHJ,EAAMkB,KAAI,EAAGf,MAAKN,WACjBO,EAAAA,cAACF,EAAG,CAACiB,IAAKhB,EAAKA,IAAKA,EAAKN,MAAOA,QAIjC,EAIXc,EAAKH,UAAY,CACfI,KAAMH,IAAAA,MAAgB,CACpBlB,KAAMkB,IAAAA,MAAgB,CACpBI,MAAOJ,IAAAA,QACLA,IAAAA,MAAgB,CACdN,IAAKM,IAAAA,OAAiBC,WACtBb,MAAOY,IAAAA,OAAiBC,cAE1BA,aACDA,aACFA,YAGL,O","sources":["webpack://homepage/./src/helpers/group-tag.js","webpack://homepage/./src/pages/tags/style.module.scss","webpack://homepage/./src/pages/tags/index.jsx"],"sourcesContent":["const groupTag = (tags, limit) => {\n  const sortedTags = [...tags].sort((a, b) => {\n    return b.count - a.count\n  })\n\n  return {\n    top: sortedTags.slice(0, limit),\n    other: sortedTags.slice(limit),\n  }\n}\n\nexport default groupTag\n","// extracted by mini-css-extract-plugin\nexport var section = \"style-module--section--db9bf\";","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { graphql } from 'gatsby'\n\nimport groupTags from '../../helpers/group-tag'\n\nimport Container from '../../components/Container'\nimport Category from '../../components/Category'\n\nimport cx from 'classnames'\nimport { section } from './style.module.scss'\n\nconst Tag = ({ tag, count }) => (\n  <Category\n    item={tag}\n    text={\n      <>\n        {tag} - <em>{count}</em>\n      </>\n    }\n  />\n)\n\nTag.propTypes = {\n  tag: PropTypes.string.isRequired,\n  count: PropTypes.number.isRequired,\n}\n\nconst Tags = ({\n  data: {\n    tags: { group },\n  },\n}) => {\n  const { top, other } = groupTags(group, 10)\n  return (\n    <main>\n      <Container>\n        <section className={cx('mt-4', section)}>\n          <h2>Top Tags</h2>\n          {top.map(({ tag, count }) => (\n            <Tag key={tag} tag={tag} count={count} />\n          ))}\n        </section>\n\n        <section className={cx('mt-4', section)}>\n          <h2>Other Tags</h2>\n          {other.map(({ tag, count }) => (\n            <Tag key={tag} tag={tag} count={count} />\n          ))}\n        </section>\n      </Container>\n    </main>\n  )\n}\n\nTags.propTypes = {\n  data: PropTypes.shape({\n    tags: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          tag: PropTypes.string.isRequired,\n          count: PropTypes.number.isRequired,\n        })\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query {\n    tags: allMarkdownRemark(filter: { frontmatter: { draft: { eq: false } } }) {\n      group(field: frontmatter___categories) {\n        tag: fieldValue\n        count: totalCount\n      }\n    }\n  }\n`\n"],"names":["groupTag","tags","limit","sortedTags","sort","a","b","count","top","slice","other","section","Tag","tag","React","Category","item","text","propTypes","PropTypes","isRequired","Tags","data","group","groupTags","Container","className","cx","map","key"],"sourceRoot":""}