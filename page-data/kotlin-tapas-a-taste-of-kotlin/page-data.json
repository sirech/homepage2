{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin-tapas-a-taste-of-kotlin/","result":{"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for Meta","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"ff1a23a7-c56c-56e8-92e6-fb17ee4156a5","html":"<p>I recently did a workshop internally. It was intended to be an introduction about <a href=\"https://kotlinlang.org\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin</a>. Given that I had limited time, I was wondering which format to use. I wanted to showcase a bunch of the features that <em>Kotlin</em> brings to the table.</p>\n<p>Then I remembered <a href=\"https://www.rubytapas.com/\" target=\"_blank\" rel=\"noopener noreferrer\">RubyTapas</a> from my earlier days as a <em>Ruby</em> dev. That sounds like a good start! Who doesn’t like tapas? I did not quite remember how they were actually presented, though. My interpretation is to have small snippets of code. Each snippet illustrates a particular feature of the language. And thus <a href=\"https://github.com/sirech/kotlintapas\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlintapas</a> was born.</p>\n<!--more-->\n<h2>What are you babbling about?</h2>\n<p>Let’s assume you have an audience of people who are maybe already familiar with <em>Java</em>, but not with <em>Kotlin</em>. While code samples are nice, it’s cooler to have something concrete to play with. We have the following elements.</p>\n<ul>\n<li>A snippet of <em>Kotlin</em> code</li>\n<li>A test for that snippet</li>\n<li>A problem to fix: Either refactor the code to make it more idiomatic, or implement missing functionality, making the test green in the process</li>\n<li>A link to the appropriate documentation</li>\n</ul>\n<p>My goal is to allow everybody to play with the language a bit, and fix the problem and see the tests working for confirmation. Knowing how chaotic workshops can get, I wanted to avoid build a complex application that requires you to follow along without getting lost.</p>\n<h2>A sample tapa</h2>\n<p>Let’s check one of them. We have this this tapa about <a href=\"https://kotlinlang.org/docs/reference/data-classes.html\" target=\"_blank\" rel=\"noopener noreferrer\">Data classes</a>, with the following starting code:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>hceris<span class=\"token punctuation\">.</span>kotlintapas<span class=\"token punctuation\">.</span>dataclasses\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">DataClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> a<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span></code></pre></div>\n<p>the test looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>hceris<span class=\"token punctuation\">.</span>kotlintapas<span class=\"token punctuation\">.</span>dataclasses\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>Test\n<span class=\"token keyword\">import</span> strikt<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>expectThat\n<span class=\"token keyword\">import</span> strikt<span class=\"token punctuation\">.</span>assertions<span class=\"token punctuation\">.</span>isEqualTo\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> DataClassTest <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> one <span class=\"token operator\">=</span> <span class=\"token function\">DataClass</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"The number is \"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">`sensible equals`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> two <span class=\"token operator\">=</span> <span class=\"token function\">DataClass</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"The number is \"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">expectThat</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">`making a copy`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> copy <span class=\"token operator\">=</span> <span class=\"token function\">DataClass</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">expectThat</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>the exercise is to do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## Problem\n\n- The test is failing because the instances are not actually equal. How to fix it?\n- We want to make a copy of our class, but we are introducing a lot of duplication. What can be done about it?</code></pre></div>\n<p>which in this case is as easy as using <code class=\"language-text\">data class</code> instead of <code class=\"language-text\">class</code>.</p>\n<h2>There is more!</h2>\n<p>This is a pretty simple example, but there are <a href=\"https://github.com/sirech/kotlintapas#list-of-exercises\" target=\"_blank\" rel=\"noopener noreferrer\">plenty more</a>, some of them a lot more complex. I’ve tried to cover as many different aspects of <em>Kotlin</em> as possible, but still there is plenty left.</p>\n<p>As I mentioned, we ran this workshop internally, with around 15 or 16 working in pairs. We had three people acting as coaches, running around offering help. We only managed to go through about five tapas in one hour, and it actually felt a bit rushed. So there is plenty of material there, specially for people new to the language.</p>\n<p>Check <a href=\"https://github.com/sirech/kotlintapas\" target=\"_blank\" rel=\"noopener noreferrer\">the whole thing</a> if you are intrigued and want to use it yourself. They are free!</p>","frontmatter":{"layout":"post","title":"Kotlin tapas: Get a taste of Kotlin","path":"/kotlin-tapas-a-taste-of-kotlin/","categories":["Kotlin","Tapas","Testing"],"date":"2019/10/27","draft":false,"description":"A bunch of bite sized tapas to get a first taste of Kotlin","canonical":null,"image":null}},"related":{"nodes":[{"frontmatter":{"title":"Painless JSON with Kotlin and jackson","path":"/painless-json-with-kotlin-and-jackson/","date":"2019/06/16"}},{"frontmatter":{"title":"Either Types as an alternative to throwing exceptions in Kotlin","path":"/kotlin-either-types-instead-of-exceptions/","date":"2020/01/09"}},{"frontmatter":{"title":"Book Review: Kotlin in Action","path":"/book-review-kotlin-in-action/","date":"2020/06/28"}}]},"previous":{"frontmatter":{"title":"Descriptive assertions in Kotlin for clearer tests","path":"/descriptive-assertions-in-kotlin/","date":"2019/09/28"}},"next":{"frontmatter":{"title":"How to split the deployment of your front end and back end with the help of Consumer Driven Contract Testing","path":"/split-frontend-backend-deployment-with-cdcs/","date":"2019/11/12"}}},"pageContext":{"related":["/kotlin-either-types-instead-of-exceptions/","/painless-json-with-kotlin-and-jackson/","/book-review-kotlin-in-action/"],"previous":"/descriptive-assertions-in-kotlin/","next":"/split-frontend-backend-deployment-with-cdcs/"}},"staticQueryHashes":[],"slicesMap":{}}