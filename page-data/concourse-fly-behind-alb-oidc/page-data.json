{"componentChunkName":"component---src-templates-blog-post-js","path":"/concourse-fly-behind-alb-oidc/","result":{"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for Meta","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"cd3633c7-1ade-5ac3-8ee8-176bf42a1015","html":"<p>We recently put a <em>Concourse CI</em> instance behind an authenticated <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\">ALB</a> in <em>AWS</em>, to make sure there are two distinct logins happening without having to resort to using a bastion host.</p>\n<p>The way this works is that whenever you try to access the URL assigned to <em>Concourse</em>, there is a redirection that sends you to the identity provider. Once you log in there (using, hopefully, MFA), a cookie named <code class=\"language-text\">AWSELBAuthSessionCookie-0</code> is set in your browser and then you will reach the tool again.</p>\n<!--more-->\n<p>The code to do this is fairly straightforward. You set up a new app in your <code class=\"language-text\">IdP</code>, from which you get a <code class=\"language-text\">client_id</code> and a <code class=\"language-text\">client_secret</code>. Then set up a check in the <em>ALB</em> using <code class=\"language-text\">terraform</code></p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_lb_listener\"</span></span> <span class=\"token string\">\"web-alb\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">load_balancer_arn</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_lb<span class=\"token punctuation\">.</span>web-alb<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">port</span>              <span class=\"token punctuation\">=</span> <span class=\"token string\">\"443\"</span>\n  <span class=\"token property\">protocol</span>          <span class=\"token punctuation\">=</span> <span class=\"token string\">\"HTTPS\"</span>\n  <span class=\"token property\">ssl_policy</span>        <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ELBSecurityPolicy-TLS-1-2-2017-01\"</span>\n  <span class=\"token property\">certificate_arn</span>   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_acm_certificate_validation<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>certificate_arn<span class=\"token punctuation\">}</span></span>\"</span>\n\n  <span class=\"token keyword\">default_action</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"authenticate-oidc\"</span>\n\n    <span class=\"token keyword\">authenticate_oidc</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">authorization_endpoint</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">idp_url</span><span class=\"token punctuation\">}</span></span>/oidc/auth\"</span>\n      <span class=\"token property\">client_id</span>              <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">client_id_oidc</span><span class=\"token punctuation\">}</span></span>\"</span>\n      <span class=\"token property\">client_secret</span>          <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">client_secret_oidc</span><span class=\"token punctuation\">}</span></span>\"</span>\n      <span class=\"token property\">issuer</span>                 <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">idp_url</span><span class=\"token punctuation\">}</span></span>/oidc\"</span>\n      <span class=\"token property\">token_endpoint</span>         <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">idp_url</span><span class=\"token punctuation\">}</span></span>/oidc/token\"</span>\n      <span class=\"token property\">user_info_endpoint</span>     <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">idp_url</span><span class=\"token punctuation\">}</span></span>/oidc/me\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">default_action</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">type</span>             <span class=\"token punctuation\">=</span> <span class=\"token string\">\"forward\"</span>\n    <span class=\"token property\">target_group_arn</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_lb_target_group<span class=\"token punctuation\">.</span>web-alb<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, this has an unintended consequence. <code class=\"language-text\">fly</code> also accesses <em>Concourse CI</em> through that URL, and it cannot deal with the redirection. You are not supposed to trigger many things locally, as that should be covered by the pipelines themselves. You still need to upload a pipeline for the first time when you create a new one, and there are commands like <code class=\"language-text\">intercept</code> that you also want to use, so it is nice to have this option open in this setup.</p>\n<p><code class=\"language-text\">fly</code> itself does not help much, so we had to find a workaround. What we did was building a local proxy that forwards the request from <code class=\"language-text\">fly</code> to the <em>ALB</em> and injects the cookie in the request to make it work. The proxy is simply <code class=\"language-text\">nginx</code> with a parametrized configuration, running inside a <code class=\"language-text\">Docker</code> container. One interesting thing to note is that we have to set up some headers to that <code class=\"language-text\">intercept</code> works as well, as it relies on <em>websockets</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span> <span class=\"token number\">16</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span> $</span><span class=\"token punctuation\">{</span>CONCOURSE_PROXY_PORT<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">server_name</span> localhost</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> $</span><span class=\"token punctuation\">{</span>CONCOURSE_URL<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Cookie AWSELBAuthSessionCookie-0=$</span><span class=\"token punctuation\">{</span>COOKIE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># Fix `websocket: bad handshake` when using `fly intercept`</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Upgrade <span class=\"token variable\">$http_upgrade</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Connection <span class=\"token string\">\"upgrade\"</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This configuration is converted to a valid one in the <code class=\"language-text\">CMD</code> of the container, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#! /usr/bin/env bash</span>\n\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token comment\"># shellcheck disable=SC2016</span>\nenvsubst <span class=\"token string\">'$COOKIE $CONCOURSE_URL $CONCOURSE_PROXY_PORT'</span> <span class=\"token operator\">&lt;</span> /tmp/nginx.conf.template <span class=\"token operator\">></span> /etc/nginx/nginx.conf\nnginx <span class=\"token parameter variable\">-g</span> <span class=\"token string\">\"daemon off;\"</span></code></pre></div>\n<p>We run the container using <code class=\"language-text\">docker-compose</code> and provide the <code class=\"language-text\">COOKIE</code> in an <code class=\"language-text\">.env</code> file.</p>\n<h2>Connecting to Concourse</h2>\n<p>Once the <em>proxy</em> is running, we just need to log in with <code class=\"language-text\">fly</code>. We do that from our <code class=\"language-text\">go</code> script directly:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function-name function\">goal_login-to-concourse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fly <span class=\"token parameter variable\">--target</span> aftersales login --concourse-url <span class=\"token string\">\"http://localhost:<span class=\"token variable\">$CONCOURSE_PROXY_PORT</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is where we see one of the pain points of this solution. When you try to log in, you see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">navigate to the following URL <span class=\"token keyword\">in</span> your browser:\n\n  http://localhost:3232/sky/login?redirect_uri<span class=\"token operator\">=</span>http://127.0.0.1:50449/auth/callback\n\nor enter token manually:</code></pre></div>\n<p>that URL won’t work. You need to replace the <code class=\"language-text\">localhost</code> part with the actual URL of the <em>Concourse</em> server. We could not really figure out a way to make this a bit more user friendly, so we just need to deal with it.</p>\n<p>Getting the cookie is also a bit cumbersome, as you need to get it manually from your browser and put it in the <code class=\"language-text\">.env</code> file. I experimented a bit getting this cookie programatically, but I could not get a decrypted cookie from Chrome, so I just left at this for now.</p>\n<p>And that’s basically it. It is a bit of a hack, to be honest, but it does the job without having to compromise on the two logins setup that we were after.</p>","frontmatter":{"layout":"post","title":"Making Concourse's fly tool work behind an authenticated ALB","path":"/concourse-fly-behind-alb-oidc/","categories":["Concourse CI","AWS"],"date":"2019/04/13","draft":false,"description":"Setting Concourse CI with an authenticated ALB in AWS is an easy way to increase the security of your CI setup, but if you want to still use fly you need to do some adaptations","canonical":null,"image":null}},"related":{"nodes":[{"frontmatter":{"title":"Templating Concourse pipelines with Jsonnet: An Introduction","path":"/templating-concourse-pipelines-with-jsonnet/","date":"2020/05/19"}},{"frontmatter":{"title":"Understanding VPC endpoints","path":"/understanding-vpc-endpoints/","date":"2020/08/20"}},{"frontmatter":{"title":"Provisioning an Application Load Balancer with Terraform","path":"/provisioning-an-application-load-balancer-with-terraform/","date":"2021/01/02"}}]},"previous":{"frontmatter":{"title":"Monitoring Alerts That Don't Suck","path":"/monitoring-alerts-that-dont-suck/","date":"2021/07/02"}},"next":{"frontmatter":{"title":"Choosing an Engineering Organizational Structure","path":"/choosing-an-engineering-organizational-structure/","date":"2021/07/16"}}},"pageContext":{"related":["/templating-concourse-pipelines-with-jsonnet/","/provisioning-an-application-load-balancer-with-terraform/","/understanding-vpc-endpoints/"],"previous":"/monitoring-alerts-that-dont-suck/","next":"/choosing-an-engineering-organizational-structure/"}},"staticQueryHashes":[],"slicesMap":{}}