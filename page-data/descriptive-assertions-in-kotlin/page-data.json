{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/descriptive-assertions-in-kotlin/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for ThoughtWorks","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"2e8f14fc-de2f-50ac-b4f2-5f051845d9c3","html":"<p>I’ve written already about <a href=\"../mock-verification-in-kotlin/\">mocks in Kotlin</a>. In that post, I was using <a href=\"https://github.com/robstoll/atrium\" target=\"_blank\" rel=\"noopener noreferrer\">Atrium</a> to write my assertions. Since then I gave <a href=\"https://github.com/robfletcher/strikt\" target=\"_blank\" rel=\"noopener noreferrer\">Strikt</a> a try, which is another cool little library. Meanwhile I was using <a href=\"https://joel-costigliola.github.io/assertj/\" target=\"_blank\" rel=\"noopener noreferrer\">AssertJ</a> at work, so I’ve had the opportunity to experiment quite a bit lately!</p>\n<p>There are two little tricks (<em>KotlinTapas</em>, if you will) that I find worth sharing:</p>\n<ul>\n<li>Assertions for data classes</li>\n<li>Custom assertions</li>\n</ul>\n<!--more-->\n<h2>Assertions for <a href=\"https://kotlinlang.org/docs/reference/data-classes.html\" target=\"_blank\" rel=\"noopener noreferrer\">data classes</a></h2>\n<p>Our functions receive and return <em>data classes</em>. That means that our tests will often expect as a result a particular instance of one such class. For the assertions, we started by using <code class=\"language-text\">isEqualTo</code> to compare the whole instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">expectThat</span><span class=\"token punctuation\">(</span>SecurityContextHolder<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>authentication<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></code></pre></div>\n<p>this approach becomes a problem as your classes gain in complexity. Maybe they contain other entities, or there are lists or maps involved. Generating a proper instance to make <code class=\"language-text\">isEqualTo</code> happy ends up being a lot of work.</p>\n<p>Instead, we want to check just some of the properties. I prefer to avoid multiple assertions in one test, but in this case I see it as unavoidable. This is the solution I use for <em>AssertJ</em>, followed by the one for <em>Strikt</em></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// AssertJ</span>\nSoftAssertions<span class=\"token punctuation\">.</span><span class=\"token function\">assertSoftly</span> <span class=\"token punctuation\">{</span>\n    it<span class=\"token punctuation\">.</span><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"google-oauth2|3234123\"</span></span><span class=\"token punctuation\">)</span>\n    it<span class=\"token punctuation\">.</span><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>authorities<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>authority <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"create:recipes\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Strikt</span>\n<span class=\"token function\">expectThat</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"google-oauth2|3234123\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> authorities<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>authority <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"create:recipes\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I really like the compactness of the <em>Strikt</em> solution. To be fair, we could compress the <em>AssertJ</em> one with <code class=\"language-text\">apply</code>. But I much prefer the second one.</p>\n<p>What about the error message? A drawback of having different assertions is that you get an error message lacking in context:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Expecting:\n <span class=\"token operator\">&lt;</span><span class=\"token string\">\"EN\"</span><span class=\"token operator\">></span>\nto be equal to:\n <span class=\"token operator\">&lt;</span><span class=\"token string\">\"DE\"</span><span class=\"token operator\">></span>\nbut was not.</code></pre></div>\n<p>Who can make sense of that without looking at the test in detail? Luckily, our solution offers a much more meaningful message:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">org.opentest4j.AssertionFailedError: ▼ Expect that Some<span class=\"token punctuation\">(</span>TokenAuthentication@52789c41: Authenticated: <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> Details: null<span class=\"token punctuation\">;</span> Granted Authorities: profile, create:recipes<span class=\"token punctuation\">)</span>:\n  ▼ TokenAuthentication@52789c41: Authenticated: <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> Details: null<span class=\"token punctuation\">;</span> Granted Authorities: profile, create:recipes:\n    ▼ name:\n      ✗ is equal to <span class=\"token string\">\"google-oauth2|3234123\"</span> <span class=\"token builtin class-name\">:</span> found <span class=\"token string\">\"google-oauth2|dude\"</span></code></pre></div>\n<p>Much better, isn’t it?</p>\n<h2>Custom assertions</h2>\n<p>A way of making assertions <em>say</em> more is to expand them according to our needs. For example, I have been playing with <a href=\"https://arrow-kt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Arrow</a> a lot lately (which on its own can be an endless source of blog posts I believe). I am getting away from using exceptions as much as I can, instead using the <a href=\"https://arrow-kt.io/docs/arrow/core/either/\" target=\"_blank\" rel=\"noopener noreferrer\">Either datatype</a>. Or <em>Monad</em>, it’s not like I really know what I’m talking about.</p>\n<p>In any case, I have a repository with a function that I want to test.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span>Int<span class=\"token punctuation\">,</span> RecipeDetails<span class=\"token operator\">></span></code></pre></div>\n<p>I’m calling the method, and want to assert that I got a valid return (<code class=\"language-text\">Either.Right</code>). Then I want to check some of the properties of the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> recipe <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token function\">expectThat</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>isA<span class=\"token operator\">&lt;</span>Either<span class=\"token punctuation\">.</span>Right<span class=\"token operator\">&lt;</span>RecipeDetails<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span> <span class=\"token punctuation\">{</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"carbonara\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> ingredients<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> steps<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>this code is a bit unsatisfying. I have to check if the value is a <code class=\"language-text\">Right</code> value, convert it, and then get the actual content before I can start asserting. Luckily for us, <em>Strikt</em> allows you to write <a href=\"https://strikt.io/wiki/custom-assertions/\" target=\"_blank\" rel=\"noopener noreferrer\">custom assertions</a> that are perfect for a case like this. After hitting my head against the typing for a while, I arrived at this helper:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">reified</span> U<span class=\"token operator\">></span> Assertion<span class=\"token punctuation\">.</span>Builder<span class=\"token operator\">&lt;</span>Either<span class=\"token operator\">&lt;</span>U<span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        isA<span class=\"token operator\">&lt;</span>Either<span class=\"token punctuation\">.</span>Right<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">get</span> <span class=\"token punctuation\">{</span> b <span class=\"token punctuation\">}</span></code></pre></div>\n<p>which I use then like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> recipe <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token function\">expectThat</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"carbonara\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> ingredients<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> steps<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>not a huge change. However, it increases the readability of that little snippet and makes the intentions behind it clearer. I like code with good intentions.</p>\n<p>The same can be done for the <a href=\"https://arrow-kt.io/docs/arrow/core/option/\" target=\"_blank\" rel=\"noopener noreferrer\">Option datatype</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">></span> Assertion<span class=\"token punctuation\">.</span>Builder<span class=\"token operator\">&lt;</span>Option<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">isSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        isA<span class=\"token operator\">&lt;</span>Some<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">get</span> <span class=\"token punctuation\">{</span> t <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">></span> Assertion<span class=\"token punctuation\">.</span>Builder<span class=\"token operator\">&lt;</span>Option<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        isA<span class=\"token operator\">&lt;</span>None<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Why, though?</h2>\n<p>What did we accomplish? Two things, in my mind:</p>\n<ul>\n<li>Tests will tell a better story of what is being tested and why.</li>\n<li>When they fail, it will be easier to figure out the reason.</li>\n</ul>","frontmatter":{"layout":"post","title":"Descriptive assertions in Kotlin for clearer tests","path":"/descriptive-assertions-in-kotlin/","categories":["Kotlin","Testing","Strikt"],"date":"2019/09/28","draft":false,"description":"Readable assertions will make your Kotlin code a lot more self describing and your tests more maintainable","canonical":null,"image":null}},"related":{"nodes":[{"frontmatter":{"title":"Book Review: Kotlin in Action","path":"/book-review-kotlin-in-action/","date":"2020/06/28"}},{"frontmatter":{"title":"Either Types as an alternative to throwing exceptions in Kotlin","path":"/kotlin-either-types-instead-of-exceptions/","date":"2020/01/09"}},{"frontmatter":{"title":"Painless JSON with Kotlin and jackson","path":"/painless-json-with-kotlin-and-jackson/","date":"2019/06/16"}}]},"previous":{"frontmatter":{"title":"How to automate REST API end-to-end tests in a CI environment with Postman and Newman","path":"/how-to-automate-rest-api-end-to-end-tests/","date":"2019/08/19"}},"next":{"frontmatter":{"title":"Making Concourse's fly tool work behind an authenticated ALB","path":"/concourse-fly-behind-alb-oidc/","date":"2019/04/13"}}},"pageContext":{"related":["/kotlin-either-types-instead-of-exceptions/","/painless-json-with-kotlin-and-jackson/","/book-review-kotlin-in-action/"],"previous":"/how-to-automate-rest-api-end-to-end-tests/","next":"/concourse-fly-behind-alb-oidc/"}},
    "staticQueryHashes": []}