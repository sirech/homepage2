{"componentChunkName":"component---src-templates-blog-index-js","path":"/blog/tags/either/","result":{"pageContext":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for Meta","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"},"group":[{"frontmatter":{"layout":"post","title":"Either Types for Rust","path":"/either-types-for-rust/","categories":["Rust","Functional Programming","Exceptions","Either"],"date":"2020/10/19","draft":false,"description":"Either types are great for error handling. Rust has the Result type. It's tightly integrated into the language, and simplifies robust code"}},{"frontmatter":{"layout":"post","title":"Either Types extended version","path":"/either-types-longer-form/","categories":["Kotlin","Functional Programming","Arrow","Exceptions","Either"],"date":"2020/04/23","draft":false,"description":"The extended version of my article about Either types just got published in our corporate blog"}},{"frontmatter":{"layout":"post","title":"Either Types as an alternative to throwing exceptions in Kotlin","path":"/kotlin-either-types-instead-of-exceptions/","categories":["Kotlin","Functional Programming","Arrow","Exceptions","Either"],"date":"2020/01/09","draft":false,"description":"Using Either is an alternative to exceptions to make your code more explicit about errors. Easy and convenient with Kotlin and Arrow"}}],"pathPrefix":"blog/tags/either","first":true,"last":true,"index":1,"pageCount":1,"additionalContext":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for Meta","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}}}},"staticQueryHashes":[],"slicesMap":{}}