{"componentChunkName":"component---src-templates-blog-post-js","path":"/check-certificate-validity-concourse/","result":{"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for ThoughtWorks","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"dea2b221-4aca-5114-b581-ea8cc013e1be","html":"<p>We had a situation recently where a certificate that we created using <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener noreferrer\">LetsEncrypt</a> was about to expire, and we barely noticed in time thanks to a reminder email. For a variety of reasons we cannot automate the renewal right now, but this made me think that relying on emails begin read on time is just asking for trouble.</p>\n<p>What I did was making this check part of our build pipeline in <a href=\"https://concourse-ci.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Concourse</a>, which should be triggered 30 days before the expiration of the certificate, so that we get plenty of time to address it.</p>\n<!--more-->\n<h2>Repeated checks in Concourse</h2>\n<p><em>Concourse</em> uses the <a href=\"https://github.com/concourse/time-resource\" target=\"_blank\" rel=\"noopener noreferrer\">time</a> resource to model a periodic trigger. You can define a daily check just like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> 24h\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> time\n  <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 24h\n    <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> 11<span class=\"token punctuation\">:</span>00 AM\n    <span class=\"token key atrule\">stop</span><span class=\"token punctuation\">:</span> 11<span class=\"token punctuation\">:</span>15 AM\n    <span class=\"token key atrule\">location</span><span class=\"token punctuation\">:</span> Europe/Berlin</code></pre></div>\n<p>Then you can define a job that will be triggered every 24 hours by getting this resource:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> certificate\n  <span class=\"token key atrule\">serial</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">plan</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">aggregate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">get</span><span class=\"token punctuation\">:</span> git\n      <span class=\"token key atrule\">passed</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>prepare<span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">trigger</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">get</span><span class=\"token punctuation\">:</span> 24h\n      <span class=\"token key atrule\">trigger</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">get</span><span class=\"token punctuation\">:</span> dev<span class=\"token punctuation\">-</span>container\n      <span class=\"token key atrule\">passed</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>prepare<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> check<span class=\"token punctuation\">-</span>certificate\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> dev<span class=\"token punctuation\">-</span>container\n    <span class=\"token key atrule\">params</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">CERT</span><span class=\"token punctuation\">:</span> certs/fullchain.pem\n    <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span> git/pipeline/tasks/check<span class=\"token punctuation\">-</span>certificate/task.yml</code></pre></div>\n<p>Using the timer as a resource is a bit funky compared to what you would do in something like <em>Jenkins</em>, but once you get used to how <em>Concourse</em> does things, it makes sense to use a resource to model every “input” coming from the outside.</p>\n<h2>Checking the certificate</h2>\n<p>We can leverage <code class=\"language-text\">openssl</code> to do this check, and integrate it into our pipeline by installing the it on the container as well (through <code class=\"language-text\">apk</code> if you use alpine). The script to check a certificate looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">THIRTY_DAYS</span><span class=\"token operator\">=</span><span class=\"token number\">2592000</span>\n\n<span class=\"token keyword\">if</span> openssl x509 <span class=\"token parameter variable\">-checkend</span> <span class=\"token string\">\"<span class=\"token variable\">${THIRTY_DAYS}</span>\"</span> <span class=\"token parameter variable\">-noout</span> <span class=\"token parameter variable\">-in</span> <span class=\"token string\">\"<span class=\"token variable\">${CERT}</span>\"</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Certificate is good for another day!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Certificate has expired or will do so within 30 days!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>You can see that we are checking the certificate file that is part of the proxy that serves the domain, and not the live URL. This relies on your pipeline running often enough so that what you have there matches what is deployed.</p>\n<h2>That’s it?</h2>\n<p>Pretty much! With this check your pipeline will become red one month before the expiration of the cert, giving you ample time to do something about it. Next step could be automating not only the alert, but the renewal of the certificate as well?</p>","frontmatter":{"layout":"post","title":"Checking the validity of a certificate in Concourse","path":"/check-certificate-validity-concourse/","categories":["Continuous integration","Concourse CI","Certificates"],"date":"2019/02/14","draft":false,"description":"If you are managing a certificate for an application, you should make sure you know when it is going to expire. This can be automated as part of your build pipeline","canonical":null,"image":null}},"related":{"nodes":[]},"previous":{"frontmatter":{"title":"Testing containers with dependencies with localstack","path":"/testing-containers-serverspec-and-localstack/","date":"2019/01/21"}},"next":{"frontmatter":{"title":"An overview of IAM in AWS","path":"/aws-iam-an-overview/","date":"2019/03/09"}}},"pageContext":{"related":[],"previous":"/testing-containers-serverspec-and-localstack/","next":"/aws-iam-an-overview/"}},"staticQueryHashes":[],"slicesMap":{}}