{"componentChunkName":"component---src-templates-blog-post-js","path":"/storing-passwords-with-gopass/","result":{"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for Meta","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"8650b8df-24d9-5c18-8ae2-c85805520055","html":"<p>When you are working in a team, you tend to have a bunch of passwords that you need to share, such as the credentials that your app needs to start for example. Or maybe you need to share an account for some service.</p>\n<p>Everybody kind of knows that posting their own passwords in the open is not a great idea. Yet, team passwords are often not subjected to the same courtesy. These are some practices that I have observed recently:</p>\n<ul>\n<li>Storing the passwords on Post-It notes that everybody in the whole office can easily check.</li>\n<li>Writing the the password directly on the source code.</li>\n<li>Sending the passwords around via unencrypted email.</li>\n</ul>\n<p>When I see this, I can only think of this quote from Scott Adams:</p>\n<blockquote>\n<p>The goal of every engineer is to retire without getting blamed for a major catastrophe.</p>\n</blockquote>\n<p>Leaking sensitive information is something that I personally don’t want to attach to my resume, so I have been preaching a lot lately about storing them somewhere safe. There is a tool which I like for that, which is <a href=\"https://github.com/justwatchcom/gopass\" target=\"_blank\" rel=\"noopener noreferrer\">gopass</a>. I want to talk about setting it up and using it.</p>\n<!--more-->\n<h3>What are you even talking about?</h3>\n<p>Quoting the website of the project, <code class=\"language-text\">gopass</code> is a rewrite of the pass password manager in Go. In other words, it is a password manager that can be easily used by multiple people. It is very command line friendly, which allows you to include it in scripts. Very easy to install as well with <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">brew</a>. We will be installing <a href=\"https://www.gnupg.org/\" target=\"_blank\" rel=\"noopener noreferrer\">GPG</a> as well, since that is what actually provides the security:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> gopass gpg2</code></pre></div>\n<h2>GPG keys are still a PITA</h2>\n<p><code class=\"language-text\">gopass</code> itself is quite easy to use, but the encryption is done with <em>GPG</em>. Everybody who has dealt with that knows that it is everything but user friendly. One shortcut is to use <a href=\"https://keybase.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Keybase</a>. This is a tool that makes creating keys significantly easier, as explained <a href=\"https://github.com/pstadler/keybase-gpg-github\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n<p>This is a rough summary of the steps you need to follow in order to get your <em>GPG</em> up and running with <em>Keybase</em> for OS X:</p>\n<ul>\n<li>Install <em>Keybase</em>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew cask install keybase</code></pre></div>\n<ul>\n<li>Open the app and create an account</li>\n<li>Create a key through the <em>CLI</em>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">keybase login\nkeybase pgp gen</code></pre></div>\n<p>You will be asked if you want to push the secret key to keybase.io. That is more convenient, but you have to be aware that this puts your key in somebody’s else server.</p>\n<p>Also it is a good idea to set a passphrase when the key is exported to the GnuPG keychain.</p>\n<ul>\n<li>The key you just created is not trusted by default. You do this with <code class=\"language-text\">gpg</code> itself:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gpg --edit-key <span class=\"token variable\">${YOUR_EMAIL}</span>\ngpg<span class=\"token operator\">></span> trust <span class=\"token punctuation\">(</span>ultimate level<span class=\"token punctuation\">)</span>\ngpg<span class=\"token operator\">></span> <span class=\"token number\">5</span>\ngpg<span class=\"token operator\">></span> save</code></pre></div>\n<p>In order for <em>GPG</em> to work properly, you need to run this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GPG_TTY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">tty</span><span class=\"token variable\">)</span></span></code></pre></div>\n<p>adding it to your <code class=\"language-text\">~/.bashrc</code> will ensure that you don’t have to do it manually every time.</p>\n<h2>Initializing a new password store</h2>\n<p>The sharing part happens through a <code class=\"language-text\">git</code> repository. Every developer syncs with it in order to access the secrets. The first step is to initialize <code class=\"language-text\">gopass</code> itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gopass init</code></pre></div>\n<p>It will ask for a key, which we just created. It should for the passphrase that you set up for your <em>GPG</em> key. After that, you can set up the store for the team:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gopass setup <span class=\"token parameter variable\">--remote</span> ssh://git@bitbucket.internal.instance.org/your-team/password-store <span class=\"token parameter variable\">--alias</span> team-store\ngopass <span class=\"token function\">sync</span></code></pre></div>\n<h3>Adding a new sub-store</h3>\n<p>It’s a good idea to create multiple sub-stores, so that you can separate secrets and put them in different repositories. In that case, you need to initialize and set up a remote for the new store. Assuming there is an existing remote repository, you’ll do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gopass init <span class=\"token parameter variable\">--path</span> <span class=\"token environment constant\">$PATH</span> <span class=\"token parameter variable\">--store</span> <span class=\"token variable\">$STORE</span>\ngopass <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token parameter variable\">--store</span> <span class=\"token variable\">$STORE</span> origin <span class=\"token variable\">$REPO_URL</span>\ngopass <span class=\"token function\">sync</span></code></pre></div>\n<h2>Adding/Removing people</h2>\n<p>Once you have the whole thing set up, you can add your fellow developers to the repository. For every developer, you need to import her <em>GPG</em> key and trust it, otherwise will fail when trying to add new recipients</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://keybase.io/<span class=\"token variable\">${keybase_user}</span>/pgp_keys.asc <span class=\"token operator\">|</span> gpg <span class=\"token parameter variable\">--import</span>\n<span class=\"token comment\"># Trust</span>\ngpg --edit-key <span class=\"token variable\">${EMAIL_OF_THE_DEV}</span>\ngpg<span class=\"token operator\">></span> lsign\ngpg<span class=\"token operator\">></span> trust <span class=\"token punctuation\">(</span>level <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\ngpg<span class=\"token operator\">></span> save</code></pre></div>\n<p>After that adding somebody to the repository is a piece of cake.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gopass recipients <span class=\"token function\">add</span> <span class=\"token parameter variable\">--store</span><span class=\"token operator\">=</span>team-store <span class=\"token variable\">${KEYID}</span></code></pre></div>\n<p>your fellow developers don’t need to create a new repository. Instead, once they key has been added to the recipients list, they can just clone it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gopass clone ssh://git@bitbucket.internal.instance.org/your-team/password-store team-store</code></pre></div>\n<p>Note that if you don’t add them to the recipients list first, cloning the repo will result in an error.</p>\n<h2>Using passwords from the command line</h2>\n<p>You know the best part about this? Any shell script can be integrated with this quite easily. I have a script at work that runs a test, and it prompts you for two keys every time it runs. I did this like ten times, and then I got sick of it and rewrote the script to read them from <em>gopass</em> directly.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gopass show team-store/somewebsite/password</code></pre></div>\n<p>Is that quality of life or what? Notice that if you are running the script on a <code class=\"language-text\">CI</code> pipeline, you can inject the variables beforehand, and the script will work both locally and there, without having to install <code class=\"language-text\">gopass</code> anywhere else and without changing the script.</p>\n<h2>Troubleshooting</h2>\n<p><code class=\"language-text\">gpg</code> tends to give arcane error messages. I built a <a href=\"https://github.com/sirech/gopass-verify\" target=\"_blank\" rel=\"noopener noreferrer\">verification script</a> that helps debugging the most common issues. You can run it with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/sirech/gopass-verify.git &amp;&amp; cd gopass-verify &amp;&amp; ./go verify</code></pre></div>\n<p>Otherwise you can set the debugging flag.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export GOPASS_DEBUG=true</code></pre></div>\n<p>Running any <code class=\"language-text\">gopass</code> command afterwards will produce a lot more output that should send you in the right direction.</p>\n<h2>Summary</h2>\n<p>In summary, there is no reason to have these passwords laying around when they can be safely stored in something like <code class=\"language-text\">gopass</code>. You know who has access, and can remove the keys when people leave the team. This of course does not fix the need to rotate the keys if somebody had access to them and now shouldn’t.</p>\n<h2>Alternatives</h2>\n<p><code class=\"language-text\">gopass</code> is only one tool among many to deal with passwords. The point is not to use a concrete tool, but to become aware of the huge risk that you can incur by leaving passwords laying around. Here are some alternatives that can work as well:</p>\n<ul>\n<li><a href=\"https://www.keepassx.org/\" target=\"_blank\" rel=\"noopener noreferrer\">KeePassX</a>: Free an open source. The drawback is that there is only one master password for everybody.</li>\n<li><a href=\"https://1password.com/teams/\" target=\"_blank\" rel=\"noopener noreferrer\">1Password for teams</a>: I haven’t used personally but it was used by some colleagues. It is not free, and the passwords end up in the cloud.</li>\n<li><a href=\"https://github.com/share-secrets-safely/cli\" target=\"_blank\" rel=\"noopener noreferrer\">Sheesy</a>: Written by a work colleague.</li>\n<li><a href=\"https://www.vaultproject.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Vault by HashiCorp</a>: Introduces an online dependency and it is quite involved to set up and operate. <code class=\"language-text\">Vault</code> works better for providing secrets for applications.</li>\n</ul>\n<h3>Revisions</h3>\n<ul>\n<li>08/2019: Added <em>Troubleshooting</em> section.</li>\n<li>01/2021: Added <em>Addind a new sub-store</em> section.</li>\n</ul>","frontmatter":{"layout":"post","title":"Storing team passwords with gopass","path":"/storing-passwords-with-gopass/","categories":["Security","gopass"],"date":"2018/04/15","draft":false,"description":null,"canonical":null,"image":null}},"related":{"nodes":[{"frontmatter":{"title":"An overview of IAM in AWS","path":"/aws-iam-an-overview/","date":"2019/03/09"}},{"frontmatter":{"title":"Book Review: Securing DevOps","path":"/book-review-securing-devops/","date":"2020/05/26"}},{"frontmatter":{"title":"Signing your commits in git","path":"/signing-your-commits-in-git/","date":"2021/03/22"}}]},"previous":{"frontmatter":{"title":"Playing with CSS Grid","path":"/playing-with-css-grid/","date":"2018/04/28"}},"next":{"frontmatter":{"title":"Angular from the perspective of a React fan - Part 2","path":"/angular-from-react-part2/","date":"2018/04/29"}}},"pageContext":{"related":["/signing-your-commits-in-git/","/book-review-securing-devops/","/aws-iam-an-overview/"],"previous":"/playing-with-css-grid/","next":"/angular-from-react-part2/"}},"staticQueryHashes":[],"slicesMap":{}}