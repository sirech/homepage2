{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/angular-from-react-part1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for ThoughtWorks","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"4d8fdb9f-e671-5bad-80cb-bcf8b244e396","html":"<div class=\"guide\">\n<h3>Angular Series</h3>\n<ul>\n<li><a href=\"../angular-from-react-part1/\"><strong>Part 1 - Bootstrapping and TypeScript</strong></a></li>\n<li><a href=\"../angular-from-react-part2/\">Part 2 - Testing</a></li>\n<li><a href=\"../angular-from-react-part3/\">Part 3 - State Management</a></li>\n</ul>\n</div>\n<p>I have using <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> in personal and work projects for about two years already. I like it so much that I wanted to change my middle name to <em>React</em>, but then I realized that I do not have a middle name.</p>\n<p>Anyways, I recently started on a new project, and they built the frontend using … <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Angular</a>. Rewriting it from scratch just because the new guy really likes something else is frowned upon by people who like delivering software to customers and stuff like that, so I found myself with no other option than finally digging into it.</p>\n<p>I am grossly unqualified to give opinions about <em>Angular</em>, but that won’t stop me from doing it anyways. I want to write about my impressions thus far, comparing it with what I am used to doing in the <em>React</em> world. Note that I started directly with <em>Angular 4</em>, and I have zero plans to check <em>AngularJS</em> anytime soon, so I might be missing a lot of context about why things are as they are in <code class=\"language-text\">ng</code>.</p>\n<p>I will start with the basics, bootstrapping, defaults and so on.</p>\n<!--more-->\n<h2>Bootstrapping</h2>\n<p>Bootstrapping is kind of a dirty word in the <em>React</em> world. Setting up a new project is, frankly, a pain in the ass. I personally decided at some point that keeping up with <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Webpack</a> is a full time job, so I have outsourced my configuration to <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener noreferrer\">Create React App</a>. Even then, I am still waiting for things like <em>CSS Modules</em> out of the box. Cannot say that this is perfect.</p>\n<p><em>Angular</em>, on the other hand, follows more of a <strong>batteries included</strong> approach. Once you have the package, you get a very comprehensive initial setup just by running</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ng new awesome-app</code></pre></div>\n<p>which installs a bunch of stuff. Let’s have a look at what the <code class=\"language-text\">awesome-app</code> directory</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-rw-r--r--   <span class=\"token number\">1</span> mfernandez <span class=\"token number\">1</span>.3K Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 .angular-cli.json\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez  <span class=\"token number\">245</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 .editorconfig\ndrwxr-xr-x  <span class=\"token number\">12</span> mfernandez  <span class=\"token number\">384</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:39 .git\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez  <span class=\"token number\">544</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 .gitignore\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez <span class=\"token number\">1</span>.1K Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 README.md\ndrwxr-xr-x   <span class=\"token number\">5</span> mfernandez  <span class=\"token number\">160</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 e2e\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez  <span class=\"token number\">923</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 karma.conf.js\ndrwxr-xr-x <span class=\"token number\">894</span> mfernandez  28K Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:37 node_modules\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez 415K Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:37 package-lock.json\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez <span class=\"token number\">1</span>.3K Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 package.json\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez  <span class=\"token number\">722</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 protractor.conf.js\ndrwxr-xr-x  <span class=\"token number\">14</span> mfernandez  <span class=\"token number\">448</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 src\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez  <span class=\"token number\">363</span> Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 tsconfig.json\n-rw-r--r--   <span class=\"token number\">1</span> mfernandez <span class=\"token number\">3</span>.0K Mar <span class=\"token number\">25</span> <span class=\"token number\">22</span>:36 tslint.json</code></pre></div>\n<p>A lot of goodies straight from the beginning! I love free stuff. You have <a href=\"https://palantir.github.io/tslint/\" target=\"_blank\" rel=\"noopener noreferrer\">tslint</a> configured, <a href=\"https://karma-runner.github.io/2.0/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">karma</a> for the unit tests, and even end-to-end tests with <a href=\"https://www.protractortest.org/#/\" target=\"_blank\" rel=\"noopener noreferrer\">protractor</a>. Pretty impressive. I wish it was as easy to get started in <em>React</em>.</p>\n<p>It is <em>very</em> opinionated, though. It seems there is a strong consensus in the community regarding the tools to use. <code class=\"language-text\">npm</code> is favored over <code class=\"language-text\">yarn</code>, <code class=\"language-text\">TypeScript</code> over <code class=\"language-text\">JavaScript</code>, and so on.</p>\n<h2>TypeScript</h2>\n<p>I remember back in my old company there were some internal discussions regarding typing in JS. One camp favored <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">TypeScript</a>, the other <em>JavaScript</em> and <a href=\"https://flow.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Flow</a>. I ended up going with <em>flow</em>, but I always had the feeling that it was not catching a lot of errors, and that I was spending a lot of time making it sort of work, like with <a href=\"https://github.com/flowtype/flow-typed\" target=\"_blank\" rel=\"noopener noreferrer\">flow-typed</a>. I haven’t yet fully understood the whole type system that <em>TypeScript</em> provides, yet you can see that there is one important difference with flow. It is much more integrated with the core language itself, which makes it a lot more reliable in my impression.</p>\n<p><em>TypeScript</em> is refreshing in a sense because things seem to work more naturally. The tooling seems to be very mature as well, from what I have seen from other people using <em>Visual Studio Code</em> or <em>IntelliJ</em> (not that I would know anything about that, I remain loyal to <em>Emacs</em>). In any case, I have found it pretty enjoyable thus far to work with.</p>\n<p>In a sense, it feels like it is bringing <em>JavaScript</em> closer to <em>Java</em>. This might sound like treason, but it can allow you to build more resilient software. Things like <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">interfaces</a> or <a href=\"https://www.typescriptlang.org/docs/handbook/classes.html#public-private-and-protected-modifiers\" target=\"_blank\" rel=\"noopener noreferrer\">private modifiers for class members</a> help to avoid surprises and to build more isolated components. For projects with multiple developers working on the same codebase I can see this leading to a better overall architecture.</p>\n<p><em>TypeScript</em> is being driven pretty heavily by <em>Microsoft</em>. They are actively developing features themselves, but also porting the <a href=\"https://github.com/tc39/proposals\" target=\"_blank\" rel=\"noopener noreferrer\">proposals</a> that come into <em>EcmasScript</em>. I was a bit confused in the beginning about that, but you only have to remember that only stage 3 proposals or above seem to be supported. I found <a href=\"http://kangax.github.io/compat-table/es2016plus/#typescript2_8\" target=\"_blank\" rel=\"noopener noreferrer\">this</a> site that allows you to check exactly which features are supported.</p>\n<h2>Linting <a name=\"linting\"></a></h2>\n<p>I am a big fan of linting, and <code class=\"language-text\">ng</code> delivers by including a config for <a href=\"https://palantir.github.io/tslint/\" target=\"_blank\" rel=\"noopener noreferrer\">tslint</a> out of the box. You just run <code class=\"language-text\">ng lint</code> and you get instant feedback.</p>\n<p>Lately, however, I have been thinking about the role of a linter in general. After seeing how well <a href=\"https://golang.org/cmd/gofmt/\" target=\"_blank\" rel=\"noopener noreferrer\">gofmt</a> works, I am starting to think that a linter should not be concerned with the formatting of the code, just avoiding bad practices or possible bugs. In the case of <em>JavaScript</em>, I have experimented a bit with <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"noopener noreferrer\">prettier</a> to automatically format my code, although I have only used it thus far in personal projects. That is something I want to check in more detail in the future.</p>\n<h2>Next</h2>\n<p>First impression was good, but other things have not worked that well. The next part will be about testing.</p>","frontmatter":{"layout":"post","title":"Angular from the perspective of a React fan - Part 1","path":"/angular-from-react-part1/","categories":["JavaScript","React","Angular","TypeScript","angular-cli"],"date":"2018/03/25","draft":false,"description":"First part of my series on Angular, coming from a React background. This article is about bootstrapping and TypeScript","canonical":null,"image":null}},"related":{"nodes":[]},"previous":{"frontmatter":{"title":"Storing team passwords with gopass","path":"/storing-passwords-with-gopass/","date":"2018/04/15"}},"next":{"frontmatter":{"title":"Playing with CSS Grid","path":"/playing-with-css-grid/","date":"2018/04/28"}}},"pageContext":{"related":[],"previous":"/storing-passwords-with-gopass/","next":"/playing-with-css-grid/"}},
    "staticQueryHashes": []}