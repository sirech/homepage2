{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/migrating-to-gatsby/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for ThoughtWorks","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"0d7c773a-fff7-5246-bb63-00d46e3d3052","html":"<p>Some months ago, I decided to rewrite my website using <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>, to experiment with a bunch of new features of <em>React</em> that I wanted to use at work. To spare myself the trouble of bootstrapping the whole thing, I used the awesome <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener noreferrer\">Create React App</a> from <em>Facebook</em>.</p>\n<p>Lately I have been working with a lot of different technologies and setups, and I wanted to get into the habit of writing about it a bit more, if only for my own amusement. I have been looking for a super simple way to publish <em>Markdown</em> files that I could host myself. After looking a bit around, it seemed to me that <em>CRA</em> was not going to provide that unless I built a significant part of it myself.</p>\n<p>Then I stumbled across <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Gatsby</a>. I was not keen to spend a lot of time doing plumbing and configuration, but <em>Gatsby</em> offered a lot of useful features, and seemed to be a very convenient way to set up a simple blog while keeping <em>React</em> pages. I went with <a href=\"https://github.com/jaxx2104/gatsby-starter-bootstrap\" target=\"_blank\" rel=\"noopener noreferrer\">this bootrapper</a>, as it came with <em>Bootstrap 4</em>, which is what I have been using for my personal projects lately.</p>\n<p>There are basically endless possibilities to customize <em>Gatsby</em>, and plenty of resources on the internet to get inspiration from as well. There were a few areas where I couldnâ€™t find much help, though, so I wrote down some thoughts about how to get things like testing, dockerizing or a CI/CD pipeline.</p>\n<!--more-->\n<h2>Testing</h2>\n<p>The initial distribution does not come with any setup infrastructure. For building static pages testing is not as important as in other cases, but I still want some simple sanity tests to make sure my components are not blowing up. <a href=\"https://gist.github.com/m-allanson/3dd343db56951ba852fd09a7e52d6a89\" target=\"_blank\" rel=\"noopener noreferrer\">This Gist</a> helped me get in the right direction to do a minimal setup for <a href=\"https://facebook.github.io/jest/\" target=\"_blank\" rel=\"noopener noreferrer\">Jest</a>, which is my goto framework for testing <em>React</em> apps.</p>\n<p>For my components I am not really interested in snapshot tests (I feel visual inspection is enough to check the layout), so I went with <a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"noopener noreferrer\">Enzyme</a> instead, to do a shallow render of every component. I added this <code class=\"language-text\">setupTests.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme-adapter-react-15'</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// a global graphql is expected by gatsby</span>\nglobal<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">graphql</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">''</span></code></pre></div>\n<p>All my tests are very similar, just a quick check that the component renders. An example would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> Talks <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'components'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Talks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Talks <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Dockerizing the app</h2>\n<p>Since quite some time, I tend to use <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker</a> to package all my applications. I love having a unified way to build artifacts that can be dealt in an unified manner, regardless of technology. Following <a href=\"http://heiber.im/post/creating-a-solid-docker-base-image/\" target=\"_blank\" rel=\"noopener noreferrer\">the best practices</a> from a colleague from work, I set out to containerize my freshly built website, which turned out to be much harder than I thought.</p>\n<p>My use case for <em>Docker</em> in this case is a bit forced, as I am not really running anything inside the container. Instead, I am using it to compile the repo to a bunch of html, css and js files, which I extract from the container so that it can be served by <a href=\"https://www.nginx.com/\" target=\"_blank\" rel=\"noopener noreferrer\">nginx</a>. Nevertheless, I still want to use a good quality image for that.</p>\n<p>My problems with <em>Gatsby</em> were mostly related to image plugins. There is <code class=\"language-text\">sharp</code> and some others that needed <code class=\"language-text\">libpng</code> among others. After much fighting and cursing, I shamefully gave up on using <em>alpine</em> to build the code and switched instead to a <em>slim</em> image, which bloated the size of the container quite a lot. Here is how it looks like</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:9.8.0-slim <span class=\"token keyword\">as</span> builder</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> SITE_URL=<span class=\"token string\">''</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get install -y build-essential libpng-dev zlib1g-dev <span class=\"token operator\">\\</span>\n    &amp;&amp; yarn <span class=\"token operator\">\\</span>\n    &amp;&amp; yarn run build <span class=\"token operator\">\\</span>\n    &amp;&amp; yarn cache clean <span class=\"token operator\">\\</span>\n    &amp;&amp; find public -regextype posix-basic -regex <span class=\"token string\">'.*\\.\\(js\\|css\\)\\(.map\\)\\?$'</span> | xargs -I@ sh -c <span class=\"token string\">\"gzip -c @ > @.gz\"</span> <span class=\"token operator\">\\</span>\n    &amp;&amp; rm -Rf node_modules <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get remove -y build-essential libpng-dev zlib1g-dev <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get clean</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:3.7</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /app/public build</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> cp -a build/* public/ &amp;&amp; echo <span class=\"token string\">'Build done'</span></span></code></pre></div>\n<p>I am using a <a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"noopener noreferrer\">Multi Stage build for docker</a>. That way, even if the building takes quite a lot of space, the resulting image is very small, and it can be published easily. I really like using this feature to get the smallest possible images.</p>\n<h2>CI/CD Pipeline</h2>\n<p>Writing a pipeline for a hobby project like this is a complete overkill, but I still wanted to get it automatically deployed after each commit while doing a bunch of quality checks before. I host it on <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Travis</a>, which is awesome for this kind of projects.</p>\n<p>My pipeline is relatively standard, which a bunch of steps to ensure that it works, plus packaging it and deploying it after that:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> lint\n  <span class=\"token punctuation\">-</span> test\n  <span class=\"token punctuation\">-</span> security\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> docker\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> branch = master\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> deploy\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> branch = master</code></pre></div>\n<p>The steps are implemented using <code class=\"language-text\">npm</code> scripts. I included some security checks using <a href=\"https://github.com/Stono/hawkeye\" target=\"_blank\" rel=\"noopener noreferrer\">Hawkeye</a> because it is super easy to do and that gives me a bit of peace of mind.</p>\n<h2>Summary</h2>\n<p>It took me some effort to understand and deploy to my server, but I am pretty pleased with the result, which is <a href=\"https://github.com/sirech/homepage2\" target=\"_blank\" rel=\"noopener noreferrer\">on Github</a>. It is quite easy to set up, and pretty flexible to modify to your own liking. The only thing I didnâ€™t manage to do was to leverage <a href=\"https://reactstrap.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Reactstrap</a> to get Bootstrap aware React components. As I understood it is related to <a href=\"https://github.com/gatsbyjs/gatsby/issues/2714\" target=\"_blank\" rel=\"noopener noreferrer\">this issue</a>, which will get hopefully fixed sometime soon.</p>","frontmatter":{"layout":"post","title":"Migrating to Gatsby","path":"/migrating-to-gatsby/","categories":["React","Gatsby"],"date":"2018/03/18","draft":false,"description":"It all starts here. After using Create React App for a while, I decided to switch to Gatsby for my personal website","canonical":null,"image":null}},"related":{"nodes":[]},"previous":null,"next":{"frontmatter":{"title":"Storing team passwords with gopass","path":"/storing-passwords-with-gopass/","date":"2018/04/15"}}},"pageContext":{"related":[],"previous":null,"next":"/storing-passwords-with-gopass/"}},
    "staticQueryHashes": []}