{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/angular-from-react-part2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for ThoughtWorks","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"4201a7dc-be9b-5759-82b2-77b78faab498","html":"<div class=\"guide\">\n<h3>Angular Series</h3>\n<ul>\n<li><a href=\"../angular-from-react-part1/\">Part 1 - Bootstrapping and TypeScript</a></li>\n<li><a href=\"../angular-from-react-part2/\"><strong>Part 2 - Testing</strong></a></li>\n<li><a href=\"../angular-from-react-part3/\">Part 3 - State Management</a></li>\n</ul>\n</div>\n<p>The first part of the series was about the first steps when setting up <em>Angular</em>. In this post I want to talk about testing. This has been the part that has disappointed me the most thus far. Compared to something like <a href=\"https://facebook.github.io/jest/\" target=\"_blank\" rel=\"noopener noreferrer\">Jest</a>, it does not seem to be that straightforward to set up your testing. Writing new tests for <em>Angular</em> reminds me of an old project where we used <a href=\"http://qunitjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">QUnit</a>, where writing JS Tests was something that everybody actively tried to avoid.</p>\n<h2>The importance of testing</h2>\n<p>I have been trying to focus much more on <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\" target=\"_blank\" rel=\"noopener noreferrer\">TDD</a> lately. This is a good practice to follow in general. When you are working with an unfamiliar technology putting extra focus on testing can give you a lot more confidence to change things.</p>\n<p>If you want to do any decent <a href=\"https://en.wikipedia.org/wiki/CI/CD\" target=\"_blank\" rel=\"noopener noreferrer\">CI/CD</a>, there is no other way than having a good suite of tests that are easy to maintain and expand, which run reliably fast. The framework plays a big role in ensuring that, or at least it should get out of the way so that you can build what you need on top of it.</p>\n<!--more-->\n<h2>Speed</h2>\n<p><a href=\"https://xkcd.com/303/\" target=\"_blank\" rel=\"noopener noreferrer\">Fast tests</a> are not a luxury, but a crucial requirement\nin order to have a quick feedback loop. In turn, that enables you to move\nquickly with small changes, always being in a state that works. Here is the\npoint where <em>Angular</em> drops the ball the most. This prompt has become a big part\nof my life lately:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> t\n01 05 <span class=\"token number\">2018</span> 00:39:58.283:INFO <span class=\"token punctuation\">[</span>karma<span class=\"token punctuation\">]</span>: Karma v2.0.0 server started at http://0.0.0.0:9876/\n01 05 <span class=\"token number\">2018</span> 00:39:58.285:INFO <span class=\"token punctuation\">[</span>launcher<span class=\"token punctuation\">]</span>: Launching browser ChromeHeadless with unlimited concurrency\n01 05 <span class=\"token number\">2018</span> 00:39:58.372:INFO <span class=\"token punctuation\">[</span>launcher<span class=\"token punctuation\">]</span>: Starting browser ChromeHeadless\n01 05 <span class=\"token number\">2018</span> 00:40:29.587:INFO <span class=\"token punctuation\">[</span>HeadlessChrome <span class=\"token number\">67.0</span>.3391 <span class=\"token punctuation\">(</span>Mac OS X <span class=\"token number\">10.13</span>.4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>: Connected on socket jC8ho-ctNv4E4irCAAAA with <span class=\"token function\">id</span> <span class=\"token number\">26948242</span></code></pre></div>\n<p>For reasons that I do not quite understand, even running simple unit tests requires launching an instance of <em>Headless Chrome</em>. Coming from <em>Jest</em>, having to wait two minutes to run a single test drives me crazy. In theory there is a watch mode, but I was told that, at least on our project, it was not reliable at picking up changes.</p>\n<p>And speaking of running single tests, the only way I have found to run single tests is to use <code class=\"language-text\">fit</code> or <code class=\"language-text\">fdescribe</code> blocks, which is quite inconvenient. <a href=\"https://stackoverflow.com/a/43669082/3785\" target=\"_blank\" rel=\"noopener noreferrer\">It seems</a> that there is no easy way of achieving this, so I might have to give the watch mode another try. For now we had to configure <a href=\"https://palantir.github.io/tslint/\" target=\"_blank\" rel=\"noopener noreferrer\">tslint</a> so that it fails when you accidentally commit a test using <code class=\"language-text\">fit</code> or <code class=\"language-text\">fdescribe</code>. Otherwise you might disable most of your test suite by mistake.</p>\n<p>In any case, this is a pretty big drawback. Having to wait for your simple test over and over totally takes me out of the flow, and is very tempting to take shortcuts and build a lot of changes at once, instead of testing them separately. I really hope that this is just me using the tool incorrectly, and that enlightment will come when I least expect it. My faith has not been rewarded thus far.</p>\n<h2>Unit Tests</h2>\n<p>There are two main types of unit tests that I have been writing: Tests for services and components. Services are fairly straightforward, as they tend to be pure functions that can be easily tested. Remote calls can be mocked fairly easily with <a href=\"https://jasmine.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Jasmine</a>.</p>\n<p>Components need their own section.</p>\n<h3>Testing components</h3>\n<p>My first instinct when starting to work on an <code class=\"language-text\">Angular</code> project was to break the bigger components apart into multiple small <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\" target=\"_blank\" rel=\"noopener noreferrer\">presentational components</a>. However, writing some simple unit tests for them has proven to be quite challenging.</p>\n<p>When testing small simple components that donâ€™t manage any state, I often find it enough to either do a sanity check (the component can be rendered without an error), or a simple snapshot test to have a glance at the html. It could look like this in <em>React</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> Techs <span class=\"token keyword\">from</span> <span class=\"token string\">'./Techs'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'components'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Techs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Techs <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I wanted to do a similar thing in <em>Angular</em>, and I have had a lot of trouble to\nachieve the same result without writing a lot of code. Thankfully, a colleague of mine <a href=\"https://medium.com/@AikoPath/testing-angular-components-with-input-3bd6c07cfaf6\" target=\"_blank\" rel=\"noopener noreferrer\">already wrote about this</a>. As far as I know, this is the smallest sanity check test that you can get for an <em>Angular</em> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ComponentFixture<span class=\"token punctuation\">,</span> TestBed<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core/testing'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>MyComponent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./my-component.component'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyComponent'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">host-component</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;my-component [count]=\"count\">&lt;/my-component></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestHostComponent</span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">testHostFixture</span><span class=\"token operator\">:</span> ComponentFixture<span class=\"token operator\">&lt;</span>TestHostComponent<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">configureTestingModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">declarations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MyComponent<span class=\"token punctuation\">,</span> TestHostComponent<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">compileComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    testHostFixture <span class=\"token operator\">=</span> TestBed<span class=\"token punctuation\">.</span><span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>TestHostComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testHostFixture<span class=\"token punctuation\">.</span><span class=\"token function\">detectChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should create'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testHostFixture<span class=\"token punctuation\">.</span>componentInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That is a lot of cruft just to render a simple component! You need to create a mock component to wrap the one that you want to test, and do a bunch of initializations with <code class=\"language-text\">TestBed</code>. Also, this seems to get more and more complex the more your component grows. Compared to <a href=\"https://airbnb.io/enzyme/\" target=\"_blank\" rel=\"noopener noreferrer\">Enzyme</a> this feels quite heavyweight. Again, you can actually test everything you want. But the more friction you add the bigger the chance that shortcuts will be taken.</p>\n<p>Another point of confusion to me is when to use <code class=\"language-text\">detectChanges</code> and <code class=\"language-text\">whenStable</code> in tests. I have seen tests that use them in different combinations. They tend to break easily if you donâ€™t use the right order as well.</p>\n<h2>End to end tests</h2>\n<p>Given that you are already using a browser for unit tests, the conceptional jump to full end to end tests is smaller than in other frameworks. <em>Angular</em> uses <a href=\"https://www.protractortest.org/#/\" target=\"_blank\" rel=\"noopener noreferrer\">Protractor</a>, which sits on top of <a href=\"https://www.seleniumhq.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Selenium</a>. In completely expected news, they suffer from the same flakyness that every other <em>e2e</em> framework has. Making sure that you test at the right level can save you a lot of pain. Donâ€™t write an <em>e2e</em> test when a unit test will suffice!</p>\n<h2>The right level of testing</h2>\n<p>What more is there to say about this? Just read <a href=\"https://martinfowler.com/bliki/TestPyramid.html\" target=\"_blank\" rel=\"noopener noreferrer\">the testing pyramid</a>. This reminds me about discussions I had in the past about the need of having automated tests. Luckily that war seems to be over. Writing tests at different levels of integration instead of just doing super high level tests has now taken its place.</p>\n<h2>Next</h2>\n<p>Testing has been pretty rough thus far. Working on an app that is poorly architected does not help, but it is still more painful that you would expect nonetheless. Another area that was very important to me, coming from <em>React</em>, was state management. I will talk about that in the next entry.</p>","frontmatter":{"layout":"post","title":"Angular from the perspective of a React fan - Part 2","path":"/angular-from-react-part2/","categories":["JavaScript","React","Angular","TypeScript","angular-cli"],"date":"2018/04/29","draft":false,"description":"Second part of my series on Angular, coming from a React background. This article focus on testing","canonical":null,"image":null}},"related":{"nodes":[]},"previous":{"frontmatter":{"title":"Playing with CSS Grid","path":"/playing-with-css-grid/","date":"2018/04/28"}},"next":{"frontmatter":{"title":"Angular from the perspective of a React fan - Part 3","path":"/angular-from-react-part3/","date":"2018/07/07"}}},"pageContext":{"related":[],"previous":"/playing-with-css-grid/","next":"/angular-from-react-part3/"}},
    "staticQueryHashes": []}