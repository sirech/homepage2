{"componentChunkName":"component---src-templates-blog-post-js","path":"/replacing-eslint-with-prettier/","result":{"data":{"site":{"siteMetadata":{"title":"Mario Fernandez","description":"This is the blog from Mario Fernandez, a Software Developer working for ThoughtWorks","author":"Mario Fernandez","url":"https://hceris.com","twitter":"@sirech"}},"post":{"id":"afcd005c-a3aa-5fd3-8d13-53cd08ef84ec","html":"<p>As I mentioned <a href=\"../angular-from-react-part1/#linting\">while talking about Angular</a>, I have been thinking lately about what should be the role of a linter on a project.</p>\n<p>I am a huge fan of linters in general. I love the idea of outsourcing pointless discussions about how to style code to a ruthless program that runs automatically. I imagine the pipeline laughing at whoever broke the build last and scolding them:</p>\n<blockquote>\n<p>Nothing personal, human, but if you do not put a space before that brace I will block your feature forever</p>\n</blockquote>\n<p>Linters can help with consistency throughout a codebase. They help catching potential errors as well. It is truly built-in quality almost for free.</p>\n<p>However, I have been using some tools lately, such as <a href=\"https://www.terraform.io/docs/commands/fmt.html\" target=\"_blank\" rel=\"noopener noreferrer\">Terraform</a> or <a href=\"https://golang.org/pkg/fmt/\" target=\"_blank\" rel=\"noopener noreferrer\">Go</a>, that take this one step further, and include a tool to directly format the code, without a linting and fixing phase. It actually makes a lot of sense, if you think about it. Automated checking is the first step, but why bother fixing the problems manually when you can automate that step as well?</p>\n<!--more-->\n<h2>Prettier</h2>\n<p>I have been using <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"noopener noreferrer\">Prettier</a> more and more in my projects. With this you can actually leave the formatting of the code to it, and use <a href=\"https://eslint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">ESLint</a> to catch other errors. I really like this combination. <em>ESLint</em> can still provide plenty of value, but I leave getting my code aligned and formatted to a tool that runs as often as I like.</p>\n<p>Adding it to a project is really easy. You need to add the dependency first</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add --dev prettier</code></pre></div>\n<p>Then you can extend the <code class=\"language-text\">scripts</code> with a target for it</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write \\\"**/*.+(js|jsx|json|css|scss)\\\"\"</span></code></pre></div>\n<p>You can run this on commit. For this very blog if have it set up using <a href=\"https://github.com/okonet/lint-staged\" target=\"_blank\" rel=\"noopener noreferrer\">lint-staged</a> like <a href=\"https://github.com/sirech/homepage2/blob/master/package.json#L81-L100\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>.</p>\n<p>And that is pretty (duh) much it. Neat and formatted code that you can share with people who obsess about these kind of details like you.</p>\n<h3>Play nice with ESLint</h3>\n<p>Now you don’t want your nicely formatted code to trigger a thousand <em>ESLint</em> warnings. Luckily, somebody already thought of this. <a href=\"https://github.com/prettier/eslint-config-prettier\" target=\"_blank\" rel=\"noopener noreferrer\">eslint-config-prettier</a> allows you to turn off these rules, so that both tools keep working together properly.</p>\n<h3>You want more?</h3>\n<p>Once you start with the formatting, you cannot stop. We already made it part of the commit hook, but why wait so long? Shouldn’t the editor run <code class=\"language-text\">prettier</code> automatically on save? You bet it should. In my case, as a faithful <em>Emacs/Spacemacs</em> user, I again made use of a bunch of existing packages so that I get <code class=\"language-text\">prettier</code> run on my <em>JavaScript</em> buffers on save. The config <a href=\"https://github.com/sirech/spacemacs.d/blob/master/layers/aj-javascript/packages.el\" target=\"_blank\" rel=\"noopener noreferrer\">ain’t pretty</a>, but it does the job.</p>\n<h2>Next</h2>\n<p>This is so cool, why keep it only for JS? I managed to integrate <code class=\"language-text\">terraform fmt</code> and <code class=\"language-text\">gofmt</code> already, and I wouldn’t mind doing something similar for every language that I have to touch (even <em>bash</em>).</p>","frontmatter":{"layout":"post","title":"Replacing ESLint with prettier","path":"/replacing-eslint-with-prettier/","categories":["JavaScript","prettier","eslint"],"date":"2018/08/29","draft":false,"description":"I've started using Prettier for formatting my code. ESLint is now purely a linter. Both of them work together beautifully","canonical":null,"image":null}},"related":{"nodes":[{"frontmatter":{"title":"Angular from the perspective of a React fan - Part 1","path":"/angular-from-react-part1/","date":"2018/03/25"}},{"frontmatter":{"title":"Playing with CSS Grid","path":"/playing-with-css-grid/","date":"2018/04/28"}},{"frontmatter":{"title":"Migrating to Gatsby 2","path":"/migrating-to-gatsby2/","date":"2018/10/03"}}]},"previous":{"frontmatter":{"title":"Setting up Traefik","path":"/setting-up-traefik/","date":"2018/08/16"}},"next":{"frontmatter":{"title":"Recording APIs with WireMock","path":"/recording-apis-with-wiremock/","date":"2018/09/10"}}},"pageContext":{"related":["/migrating-to-gatsby2/","/angular-from-react-part1/","/playing-with-css-grid/"],"previous":"/setting-up-traefik/","next":"/recording-apis-with-wiremock/"}},"staticQueryHashes":[]}